@startuml
title CA1: IaC <-> IaaS (Assignment-Mapped, Collapsed GPU)

skinparam shadowing false
skinparam componentStyle rectangle
skinparam defaultTextAlignment left
skinparam nodesep 70
skinparam ranksep 100

' ===================== IaC Layer =====================
package "IaC" as IAC {
  component TF   as "Terraform"
  component ANS  as "Ansible"
  component PKR  as "Packer (base AMIs)"
  component CI   as "CI/CD (fmt/lint/plan/apply)"
  component RS   as "Remote State (S3 + DynamoDB)"
  component VAL  as "Smoke Test Script (validation)"
  component DOCS as "Docs & Outputs (README, logs, summary)"
}

note bottom of TF
CA1: (1) choose tooling
     (2) idempotent infra
     (3) variables/params
     (5) deploy/destroy cmds
     (7) outputs for README
end note

note bottom of ANS
CA1: (1) tooling
     (2) idempotent pkg/service install
     (3) templated vars
     (6) pipeline wiring support
end note

note bottom of PKR
CA1: (2) stable images reduce drift
     (3) param image tags
Tip: optional but improves repro
end note

note bottom of CI
CA1: (2) reproducibility via plan
     (5) automate apply/destroy
Grading: automation quality
end note

note bottom of RS
CA1: (2) reproducible state mgmt
Tip: workspaces dev/stg/prod
end note

note bottom of VAL
CA1: (6) run producer->kafka->processor->db
     collect logs/screens
end note

note bottom of DOCS
CA1: (7) README (pre-reqs, deploy, destroy, tests)
     run logs, outputs summary
end note

CI --> TF : plan/apply/destroy
TF --> RS : backend/lock
CI --> VAL : run tests
DOCS <- CI : publish artifacts

' ===================== IaaS Layer (stacked) =====================
package "IaaS (AWS)" as IAAS {

  package "Networking" as NET {
    node VPC  as "VPC / Subnets / Routes / SG"
  }
  note bottom of NET
CA1: (2) declare network, SG rules
(3) region/az as variables
end note

  package "Compute - Control" as CTRL {
    node EKS  as "EKS (control plane) [optional]"
  }
  note bottom of CTRL
CA1: (2) define cluster in code
(3) size/versions via vars
end note

  package "Compute - Templates & Scale" as CMP {
    component AMI as "Base AMI"
    node   LTA  as "Launch Template (app nodes)"
    node   ASGA as "ASG (app nodes)"
  }
  note bottom of CMP
CA1: (2) VM shape/count in code
(3) instance types, desired/min/max vars
(5) ASG fully destroyed by code
end note

  package "Platform Services" as PLAT {
    node   MSK  as "MSK or EC2 Kafka"
  }
  note bottom of PLAT
CA1: (2) install/service config for Kafka
(3) topic names as vars
(6) used by smoke test
end note

  package "Storage" as STOR {
    database ST  as "EBS / EFS / FSx"
  }
  note bottom of STOR
CA1: (2) declare volumes/classes
(3) size/perf via vars
end note

  package "Identity & Secrets" as IDSEC {
    component IAM as "IAM Roles / IRSA / Profiles"
    component SSM as "SSM / Param Store / Secrets"
    component KMS as "KMS Keys"
  }
  note bottom of IDSEC
CA1: (4) secure secrets (no plaintext)
     (2) least-privilege IAM
end note

  package "Observability" as OBS {
    component CW   as "CloudWatch Logs / Metrics"
  }
  note bottom of OBS
CA1: (6) capture logs for validation
(7) attach logs in deliverables
end note
}

' ===================== Provisioning Flows =====================
TF --> VPC  : create networking
TF --> EKS  : create control plane (opt)
TF --> ST   : storage (EBS/EFS/FSx)
TF --> IAM  : roles/profiles/IRSA
TF --> SSM  : params/secrets refs
TF --> KMS  : enc keys/policies
TF --> MSK  : managed or EC2 brokers

PKR --> AMI : register base AMI
TF --> LTA  : set image = AMI
LTA --> ASGA : launch config
TF --> ASGA : min/max/desired

' ===================== Runtime / Wiring =====================
ASGA --> EKS : join nodegroup (if EKS used)
ANS  --> ASGA : converge services
SSM  --> ASGA : session/commands
CW   --> ASGA : logs/metrics

' ===================== Validation Path (CA1-6) =====================
VAL --> MSK  : produce sample event
VAL --> CW   : fetch broker/consumer logs
VAL --> DOCS : write results (screens, outputs)

' ===================== Docs & Deliverables (CA1-7) =====================
DOCS <- TF : outputs (IPs, topics, URIs)
DOCS <- VAL : validation results
DOCS <- CI  : create/destroy logs

' ===================== Notes: Mapping Summary =====================
note bottom
CA1 coverage:
(1) Tooling: Terraform/Ansible/Packer selected
(2) Idempotency: all infra/services defined in code; reruns stable
(3) Params: region, sizes, image tags, topic names, creds via vars
(4) Secrets: SSM/Secrets Manager + KMS; no plaintext in repo
(5) Automation: CI runs plan/apply/destroy; single-command UX
(6) Pipeline validation: smoke test produces, consumes, persists; logs captured
(7) Docs: README with steps; outputs summary and run logs included
end note

@enduml
